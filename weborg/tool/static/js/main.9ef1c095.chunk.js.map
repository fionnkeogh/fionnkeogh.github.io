{"version":3,"sources":["features/editor/recognizeType.ts","app/state/appState.ts","app/state/networkState.ts","app/store.ts","components/Appbar.tsx","app/hooks.ts","app/classes/multiSet.ts","app/IO/rea.ts","app/IO/sbml.ts","features/editor/readFile.ts","features/reaction_network/network.worker.ts","features/reaction_network/generateNetwork.ts","features/organizations/computeOrgs.ts","features/organizations/organization.worker.ts","features/organizations/calculateOrganizations.ts","features/lattice/graph.worker.ts","features/lattice/generateGraph.ts","app/IO/orgml.worker.ts","app/IO/orgmlExport.ts","app/IO/lattice.worker.ts","app/IO/latticeExport.ts","features/editor/writeFile.ts","components/listItems.tsx","features/editor/dropzone.tsx","app/IO/saveImage.ts","features/reaction_network/reactionNetwork.tsx","features/organizations/organizationList.tsx","features/lattice/latticeGraph.tsx","components/nodeViewDropdown.tsx","Main.tsx","index.tsx"],"names":["FileType","NodeValues","initialState","text","changedText","core","verbose","running","currentWindow","currentFileType","REA","hash","networkGraph","latticeGraph","orgList","nodeView","ALLSPECIES","appState","createSlice","name","reducers","setText","state","action","payload","split","XML","setChangedText","toggleVerbose","setRunning","setCurrentWindow","setNetworkGraph","setLatticeGraph","setOrgList","Array","fill","toggleOrgList","setNodeView","clearAppState","console","log","appReducer","reducer","actions","networkState","species","reactions","SOsToCheck","semiOrganisations","organizations","setSpecies","setReaction","addSOtoCheck","toAdd","arr","from","push","removeAtIndex","count","splice","setSemiOrganizations","setOrganizations","clearState","networkReducer","store","configureStore","app_reducer","network_reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","AppBar","styled","MuiAppBar","shouldForwardProp","prop","theme","open","zIndex","drawer","backgroundColor","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","width","enteringScreen","useAppDispatch","useDispatch","useAppSelector","useSelector","MultiSet","numberOfSpecies","hashString","cardinality","booleanArray","this","length","i","k","id","index","arrayToString","hasSpecies","str","toString","speciesarr2str","speciesArray","stoichiometry","offset","forEach","element","findIndex","ele","uid","trimStart","SBMLReader","sbml","speciesObject","reactionObject","speciesCount","json","JSON","parse","convert","xml2json","compact","spaces","model","listOfSpecies","_attributes","meta","compartement","compartment","Object","keys","reactionCount","listOfReactions","reaction","reactants","products","listOfReactants","speciesReference","reactant","Number","parseFloat","listOfProducts","product","reversable","reversible","error","warn","readFile","getState","rea","lines","lastHashtag","line","trim","includes","parseInt","_line","undefined","reactantArray","productArray","map","_","r","p","REAReader","dispatch","Worker_fn","Worker","callback","nodes","edges","alert","contains","largeSet","smallSet","generateOrganizations","semiOrganization","numberOfOrganizations","speciesList","reactionList","glpk","numberOfReactionsInvolved","entryCount","j","slice","lp","options","presol","msglev","GLP_MSG_OFF","objective","direction","GLP_MAX","vars","subjectTo","bounds","glp_create_prob","ia","ja","ar","coef","type","ub","lb","glp_add_cols","glp_set_col_bnds","GLP_LO","glp_set_obj_coef","species_position","reac_pos","bnds","glp_add_rows","glp_set_row_bnds","glp_load_matrix","result","solve","status","generateOrgVar","org","reactionsOfInterest","generateStochiometriy","semiOrg","matrix","row","rows","cols","grid","transpose","set","educts","column","object","calculateOrganizations","connected","time","values","Comlink","organizationAPI","semiOrganizations","require","then","_semiOrganizations","setToSpeciesArray","organization","timeEnd","generateLattice","speciesToIndex","speciesArrayToIndexArray","worker","graphAPI","setGraph","generateGraph","orgml","blob","Blob","FileSaver","saveAs","lattice","writeFile","REAWriter","xml","SBMLWriter","primary","secondary","MainListItems","props","title","orgCount","latticeDrawn","networkDrawn","changed","React","useState","openE","setOpenE","openRN","setOpenRN","openLtc","setOpenLtc","openOrg","setOpenOrg","handleClick","value","listLabel","current","ListItemText","sx","color","listIcon","icon","ListItemIcon","List","ListItem","button","onClick","Collapse","in","timeout","unmountOnExit","component","disablePadding","pl","fileDialog","multiple","accept","file","disabled","LabelImportant","Int8Array","flat","networkAPI","buffer","generateReactionNetwork","saveNetworkImage","style","transform","latticeAPI","generateLatticeString","generateLatticeFile","saveLatticeImage","orgmlAPI","generateOrgMLString","generateOrgML","Dropzone","monaco","useMonaco","currentType","toLowerCase","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","onerror","onload","decoder","TextDecoder","binaryStr","ArrayBuffer","editor","setTheme","updateText","decode","readAsArrayBuffer","useDropzone","noClick","getRootProps","getInputProps","height","minimap","enabled","defaultLanguage","onChange","event","beforeMount","languages","register","setMonarchTokensProvider","tokenizer","root","defineTheme","base","inherit","rules","token","foreground","fontStyle","colors","saveAsImage","svgContent","imgBlob","ReactionNetwork","ref","container","useRef","graph","layout","selector","useEffect","_elements","cytoscape","use","svg","elements","stop","redrawGraph","addListener","useImperativeHandle","draw","takeImage","full","scale","toggleGrabbable","ConcentricOptions","concentric","node","data","levelWidth","minNodeSpacing","destroy","makeLayout","run","className","forwardRef","OrganizationList","hooks","ListSubheader","Typography","wordWrap","s","LatticeGraph","nodeValue","nodeSep","edgeSep","rankSep","rankDir","ranker","minLen","edge","edgeWeight","fit","padding","spacingFactor","nodeDimensionsIncludeLabels","animate","animateFilter","animationDuration","animationEasing","boundingBox","pos","num","x","y","ready","dataStr","NOVELTY","_options","nodesMatching","reposition","position","when","meanIgnores","meanOnSelfPosition","dragWith","dagre","automove","apply","NodeViewDropdown","label","numOfOrgs","FormControl","m","minWidth","InputLabel","Select","labelId","target","MenuItem","ORGNAMES","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","spacing","breakpoints","up","TabPanel","children","other","role","hidden","networkRef","latticeRef","mdTheme","createTheme","Main","setOpen","settingsOpen","setSettingsOpen","toggleDrawer","handleClose","reason","oldNetwork","oldlattice","subscribe","currentNetwork","currentLattice","ThemeProvider","Box","display","CssBaseline","Toolbar","pr","IconButton","marginRight","flexGrow","variant","noWrap","paddingRight","marginTop","Dialog","onClose","DialogTitle","DialogContent","flexWrap","Checkbox","checked","DialogActions","Button","Paper","alignItems","justifyContent","px","Divider","bottom","paddingLeft","visibility","CircularProgress","size","fontSize","marginBottom","palette","mode","grey","overflow","flexDirection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ef1c095.chunk.js","sourcesContent":["export enum FileType {\n    XML,\n    REA\n}\n\nexport default function recoginizeType(line: string): FileType {\n    if (line[0] === '#') {\n        return FileType.REA;\n    } else {\n        return FileType.XML;\n    }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { EdgeDefinition, NodeDefinition } from \"cytoscape\";\nimport recoginizeType, { FileType } from \"../../features/editor/recognizeType\";\nimport { RootState } from \"../store\";\n\nexport enum NodeValues {\n    ORGNAMES,\n    NOVELTY,\n    ALLSPECIES\n}\n\ninterface AppState {\n    text: string,\n    changedText: boolean,\n    core: number,\n    verbose: boolean,\n    running: number,\n    currentWindow: string,\n    currentFileType: FileType,\n    hash: Map<string, number>[],\n    networkGraph: (NodeDefinition | EdgeDefinition)[],\n    latticeGraph: (NodeDefinition | EdgeDefinition)[],\n    orgList: boolean[],\n    nodeView: NodeValues,\n}\n\nconst initialState: AppState = {\n    text: `# Minimal example from Peter Dittrich and Pietro Speroni di Fenizio\n# From 'Chemical Organisation Theory', Bulletin of Mathematical Biology (2007) 69: 1199–1231 \n# [accessed Sep. 24 2021]\n# Number of Components\n4\n# Components\nA\nB\nC\nD\n# Number of Reactions\n8\n# Reactions\n1 A 1 B -> 1 A 2 B\n1 A 1 D -> 1 A 2 D\n1 B -> \n1 B 1 C -> 2 C\n1 B 1 D -> 1 C\n1 C -> \n1 C -> 1 B\n1 D -> \n`,\n    changedText: true,\n    core: 1,\n    verbose: false,\n    running: 0,\n    currentWindow: 'Editor',\n    currentFileType: FileType.REA,\n    hash: [],\n    networkGraph: [],\n    latticeGraph: [],\n    orgList: [],\n    nodeView: NodeValues.ALLSPECIES,\n};\n\nconst appState = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        setText: (state, action: PayloadAction<string>) => {\n            state.text = action.payload;\n            state.currentFileType = recoginizeType(action.payload.split('\\n')[0]);\n        },\n        setChangedText: (state, action: PayloadAction<boolean>) => {\n            state.changedText = action.payload;\n        },\n        toggleVerbose: (state, action: PayloadAction<boolean>) => {\n            state.verbose = action.payload;\n        },\n        setRunning: (state, action: PayloadAction<number>) => {\n            state.running += action.payload;\n        },\n        setCurrentWindow: (state, action: PayloadAction<string>) => {\n            state.currentWindow = action.payload;\n        },\n        setNetworkGraph: (state, action: PayloadAction<(NodeDefinition | EdgeDefinition)[]>) => {\n            state.networkGraph = action.payload;\n        },\n        setLatticeGraph: (state, action: PayloadAction<(NodeDefinition | EdgeDefinition)[]>) => {\n            state.latticeGraph = action.payload;\n        },\n        setOrgList: (state, action: PayloadAction<number>) => {\n            state.orgList = new Array(action.payload).fill(false);\n        },\n        toggleOrgList: (state, action: PayloadAction<number>) => {\n            state.orgList[action.payload] = !state.orgList[action.payload];\n        },\n        setNodeView: (state, action: PayloadAction<NodeValues>) => {\n            state.nodeView = action.payload;\n        },\n        clearAppState: (state) => {\n            console.log(\"ClearedAppState\");\n            state.text = '';\n            state.hash = [];\n            state.networkGraph = [];\n            state.latticeGraph = [];\n            state.orgList = [];\n        },\n    }\n});\n\nconst appReducer = appState.reducer;\n\nexport const { \n    setText,\n    setChangedText,\n    toggleVerbose,\n    setRunning,\n    setCurrentWindow,\n    setNetworkGraph,\n    setLatticeGraph, \n    setOrgList,\n    toggleOrgList,\n    setNodeView,\n    clearAppState\n} = appState.actions;\n\nexport const selectText = (state: RootState) => state.app_reducer.text;\nexport const selectCores = (state: RootState) => state.app_reducer.core;\n// export const selectOrganizationGraph = (state: RootState) => state.app_reducer.orgGraph;\n// export const selectNetworkGraph = (state: RootState) => state.app_reducer.networkGraph;\n\nexport { appState, appReducer };\n\nexport type { AppState };\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport{ Species, Reaction, Organization } from '../';\nimport { RootState } from \"../store\";\n\n/**\n * The current network state.\n * Contains an array of species and an array of reactions.\n */\n interface NetworkState {\n    /**\n     * Dictionary of species present in network. \n     * Key is the uid of the species.\n    */\n    species: { [key: string]: Species },\n    /**\n     * Dictionary of the interactions between species in the network. \n     * The key is a reaction string like A->B.\n    */\n    reactions: { [key: string]: Reaction },\n    SOsToCheck: number[],\n    semiOrganisations: Organization[],\n    organizations: Organization[],\n}\n\nconst initialState: NetworkState = {\n    species: {},\n    reactions: {},\n    SOsToCheck: [],\n    semiOrganisations: [],\n    organizations: [],\n}\nconst networkState = createSlice({\n    name: 'network',\n    initialState,\n    reducers: {\n        setSpecies: (state, action: PayloadAction<{[key: string]: Species;}>) => {\n            \n            state.species = action.payload;\n        },\n        setReaction: (state, action: PayloadAction<{[key: string]: Reaction;}>) => {\n\n            state.reactions = action.payload;\n        },\n        addSOtoCheck: (state, action: PayloadAction<number[]>) => {\n            const toAdd: number[] = action.payload;\n            const arr = Array.from(state.SOsToCheck);\n            arr.push(...toAdd);\n            state.SOsToCheck = arr;\n        },\n        removeAtIndex: (state, action: PayloadAction<[number, number]>) => {\n            const arr = Array.from(state.SOsToCheck);\n            const count = action.payload[0] + action.payload[1] + 1;\n            arr.splice(action.payload[0], count);\n            state.SOsToCheck = arr;\n        },\n        setSemiOrganizations: (state, action: PayloadAction<Organization[]>) => {\n            state.semiOrganisations = action.payload;\n        },\n        setOrganizations: (state, action: PayloadAction<Organization[]>) => {\n            state.organizations = action.payload;\n        },\n        clearState: state => {\n            state.reactions = {};\n            state.species = {};\n            state.SOsToCheck = [];\n            state.semiOrganisations = [];\n            state.organizations = [];\n        }\n    }\n});\n\nconst networkReducer = networkState.reducer;\n\nexport const { setSpecies, setReaction, addSOtoCheck, setSemiOrganizations, setOrganizations, removeAtIndex, clearState } = networkState.actions;\n\nexport const selectSpecies = (state: RootState) => state.network_reducer.species;\nexport const selectReactions = (state: RootState) => state.network_reducer.reactions;\n\nexport { networkState, networkReducer };\n\nexport type { NetworkState };\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { appReducer } from './state/appState';\nimport { networkReducer } from './state/networkState';\n\nexport const store = configureStore({\n  reducer: {\n    app_reducer: appReducer,\n    network_reducer: networkReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n        serializableCheck: false,\n        immutableCheck: false,\n    })\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport { styled } from '@mui/material';\n\ninterface AppBarProps extends MuiAppBarProps {\n    open?: boolean;\n}\n\nconst drawerWidth: number = 280;\n\nexport const AppBar = styled(MuiAppBar, {\n    shouldForwardProp: (prop) => prop !== 'open',\n})<AppBarProps>(({ theme, open }) => ({\n    zIndex: theme.zIndex.drawer + 1,\n    backgroundColor: '#008198',\n    transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n    }),\n    }),\n}));\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Species } from \"./species\";\n\nexport default class MultiSet {\n    hashString: string = \"\";\n    cardinality: number;\n    species: Array<Species>;\n    booleanArray: Array<boolean>;\n\n    constructor(species: Array<Species>, numberOfSpecies: number) {\n        this.species = species;\n        this.cardinality = species.length;\n        this.booleanArray = new Array<boolean>(numberOfSpecies).fill(false);\n\n        for(let i = 0, k = species.length; i < k; i++) {\n            const id: number = species[i].index;\n            this.booleanArray[id] = true;\n        }\n\n        this.hashString = this.arrayToString();\n    }\n\n    hasSpecies(species: Species): boolean {\n        return this.booleanArray[species.index];\n    }\n\n    addSpecies(species: Species): boolean {\n        if(this.hasSpecies(species) === false) {\n            this.species.push(species);\n            this.cardinality = this.species.length;\n            this.booleanArray[species.index] = true;\n            this.hashString = this.arrayToString();\n            return true;\n        }\n        return false;\n    }\n\n    getSpecies(index: number): Species {\n        return this.species[index];\n    }\n\n    getSpeciesFromID(id: number): Species {\n        for(let i = 0; i < this.cardinality; i++) {\n            if(this.species[i].index === id) {\n                return this.species[i];\n            }\n        }\n        return this.species[0];\n    }\n\n    getHashString(): string {\n        return this.hashString;\n    }\n\n    getBooleanArray(): Array<boolean> {\n        return this.booleanArray;\n    }\n\n    getCardinality(): number {\n        return this.cardinality;\n    }\n\n    toString(): string {\n        let str: string = \"{\";\n        for(let i = 0, k = this.cardinality; i < k; i++) {\n            str = str + \" [\" + this.species[i].toString() + \"]\";\n        }\n        str = str + \" }\"\n        return str;\n    }\n\n    arrayToString(): string {\n        let str = \"\";\n        for (let i = 0, k = this.booleanArray.length; i < k; i++) {\n            if(this.booleanArray[i] === true) {\n                str = str + \"1\";\n            } else {\n                str = str + \"0\";\n            }\n        }\n        return str;\n    }\n}\n","import FileSaver from \"file-saver\";\nimport { Reaction } from \"../\";\nimport { Species } from \"../\";\nimport MultiSet from \"../classes/multiSet\";\n\nexport default function REAReader (rea: string): {\n    species: {\n        [key: string]: Species;\n    };\n    reactions: {\n        [key: string]: Reaction;\n    };\n} {\n    const speciesObject: { [key: string] : Species} = {};\n    const reactionObject: { [key: string] : Reaction} = {};\n\n    const lines: string[] = rea.split('\\n');\n\n    // console.log(lines);\n\n    let numberOfSpecies = 0;\n    let numberOfReactions = 0;\n    let speciesCount = 0;\n    let reactionCount = 0;\n    let lastHashtag = '';\n\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (line[0] === '#') {\n            lastHashtag = line;\n        }\n        if(line.includes('# Number of Components')) {\n            numberOfSpecies = Number.parseInt(lines[i+1]);\n        } else if (line.includes('# Number of Reactions')) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            numberOfReactions = Number.parseInt(lines[i+1]);\n        } else {\n            while(lastHashtag.includes('# Components') && !line.includes('# Components')) {\n                const _line = lines[i];\n\n                if (_line[0] === '#') {\n                    lastHashtag = _line;\n                    break;\n                }\n\n                if(_line === undefined) {\n                    break;\n                } else if(_line.length === 0) {\n                    i++;\n                    continue;\n                }\n\n                const species: Species = {\n                    uid: _line,\n                    id: _line,\n                    index: speciesCount++,\n                    meta: {\n                    }\n                }\n                speciesObject[`${species.uid}`] = species;\n\n                i++;\n            }\n            while(lastHashtag.includes('# Reactions') && !line.includes('# Reactions')) {\n                const _line = lines[i];\n                if(_line === undefined) {\n                    break;\n                } else if(_line.length === 0) {\n                    i++;\n                    continue;\n                }\n\n                const speciesArray = Object.keys(speciesObject);\n\n                const reactantArray: Species[] = [];\n                const productArray: Species[] = [];\n                const stoichiometry: number[] = new Array(numberOfSpecies*2).fill(0);\n\n                const [reactants, products] = _line.split('->').map(_ => _.trim().split(' '));\n\n                for (let r = 0; r < reactants.length; r++) {\n                    const element = reactants[r];\n\n                    if(element.length === 0) {\n                        continue;\n                    }\n\n                    if(r%2 === 0) {\n                        // Coefficient of Species\n                        const index = speciesArray.findIndex(element => element === reactants[r+1]);\n                        stoichiometry[index] = Number.parseFloat(element);\n                    } else {\n                        // Species\n                        reactantArray.push(speciesObject[`${element}`]);\n                    }\n                }\n\n                for (let p = 0; p < products.length; p++) {\n                    const element = products[p];\n\n                    if(element.length === 0) {\n                        continue;\n                    }\n\n                    if(p%2 === 0) {\n                        // Coefficient of Species\n                        const index = speciesArray.findIndex(element => element === products[p+1]);\n                        stoichiometry[numberOfSpecies+index] = Number.parseFloat(element);\n                    } else {\n                        // Species\n                        productArray.push(speciesObject[`${element}`]);\n                    }\n                }\n    \n                const reaction: Reaction = {\n                    index: reactionCount++,\n                    uid: `${speciesarr2str(reactantArray, speciesArray, stoichiometry, 0)} -> ${speciesarr2str(productArray, speciesArray, stoichiometry, numberOfSpecies)}`,\n                    reversable: false,\n                    reactants: new MultiSet(reactantArray, numberOfSpecies),\n                    products: new MultiSet(productArray, numberOfSpecies),\n                    stoichiometry: stoichiometry,\n                }\n                reactionObject[`${reaction.uid}`] = reaction;\n\n                if (_line[0] === '#') {\n                    lastHashtag = _line;\n                    break;\n                }\n                i++;\n            }\n        }\n    }\n\n    return {species: speciesObject, reactions: reactionObject};\n}\n\nconst speciesarr2str = (arr: Species[], speciesArray: string[], stoichiometry: number[], offset: number) => {\n    let str = '';\n\n    arr.forEach(element => {\n        let index = speciesArray.findIndex(ele => ele === element.uid);\n        str = `${str} ${element.uid}[${stoichiometry[index + offset]}]`;\n    });\n\n    return str.trimStart();\n}\n\nexport function REAWriter (rea: string) {\n    let blob = new Blob([rea], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    FileSaver.saveAs( blob, 'Network.rea' );\n}\n","import FileSaver from 'file-saver';\nimport convert from 'xml-js';\n\nimport { Reaction, Species } from \"../\";\nimport MultiSet from '../classes/multiSet';\n\nfunction SBMLReader (sbml: string): {\n    species: {\n        [key: string]: Species;\n    };\n    reactions: {\n        [key: string]: Reaction;\n    };\n} {\n    const speciesObject: { [key: string] : Species} = {};\n    const reactionObject: { [key: string] : Reaction} = {};\n    let speciesCount = 0;\n    try {\n        const json = JSON.parse(convert.xml2json(sbml, {compact: true, spaces: 4}));\n        json.sbml.model.listOfSpecies.species.forEach((element: {_attributes: {id: string, name: string, compartment: string}}) => {\n            const species: Species = {\n                uid: element._attributes.id,\n                id: element._attributes.name,\n                index: speciesCount++,\n                meta: {\n                compartement: element._attributes.compartment\n                }\n            }\n            speciesObject[`${species.uid}`] = species;\n        });\n        const speciesArray = Object.keys(speciesObject);\n        let reactionCount = 0;\n        json.sbml.model.listOfReactions.reaction.forEach((element: any) => {\n            const reactants: Species[] = [];\n            const products: Species[] = [];\n            const stoichiometry: number[] = new Array(speciesArray.length*2).fill(0);\n\n            if (element.listOfReactants) {\n                try {\n                    element.listOfReactants.speciesReference.forEach((reactant: {_attributes: {species: string, stoichiometry: string}}) => {\n                        reactants.push(speciesObject[reactant._attributes.species]);\n                        const index = speciesArray.findIndex(element => element === reactant._attributes.species);\n                        stoichiometry[index] = reactant._attributes.stoichiometry ? Number.parseFloat(reactant._attributes.stoichiometry) : 1;\n                    });\n                } catch {\n                    \n                }\n\n                if(reactants.length === 0) {\n                    const reactant = element.listOfReactants.speciesReference;\n                    reactants.push(speciesObject[reactant._attributes.species]);\n                    const index = speciesArray.findIndex(element => element === reactant._attributes.species);\n                    stoichiometry[index] = reactant._attributes.stoichiometry ? Number.parseFloat(reactant._attributes.stoichiometry) : 1;\n                }\n            }\n            \n            if (element.listOfProducts) {\n                try {\n                    element.listOfProducts.speciesReference.forEach((product: {_attributes: {species: string, stoichiometry: string}}) => {\n                        products.push(speciesObject[product._attributes.species]);\n                        const index = speciesArray.findIndex(element => element === product._attributes.species);\n                        stoichiometry[speciesArray.length+index] = product._attributes.stoichiometry ? Number.parseFloat(product._attributes.stoichiometry) : 1;\n                    });\n                } catch {\n                }\n                if(products.length === 0) {\n                    const product = element.listOfProducts.speciesReference;\n                    products.push(speciesObject[product._attributes.species]);\n                    const index = speciesArray.findIndex(element => element === product._attributes.species);\n                    stoichiometry[speciesArray.length+index] = product._attributes.stoichiometry ? Number.parseFloat(product._attributes.stoichiometry) : 1;\n                }\n            }\n            \n            const speciesarr2str = (arr: Species[], offset: number) => {\n                let str = '';\n\n                arr.forEach(element => {\n                    let index = speciesArray.findIndex(ele => ele === element.uid);\n                    str = `${str} ${element.uid}[${stoichiometry[index + offset]}]`;\n                });\n\n                return str.trimStart();\n            }\n\n            const reaction: Reaction = {\n                index: reactionCount++,\n                uid: `${speciesarr2str(reactants, 0)} -> ${speciesarr2str(products, speciesArray.length)}`,\n                reversable: JSON.parse(element._attributes.reversible),\n                reactants: new MultiSet(reactants, speciesArray.length),\n                products: new MultiSet(products, speciesArray.length),\n                stoichiometry: stoichiometry,\n            }\n            reactionObject[`${reaction.uid}`] = reaction;\n        });\n    } catch (error: any){\n        console.warn(error);\n    }\n    return {species: speciesObject, reactions: reactionObject};\n}\n\nexport default SBMLReader;\n\nexport function SBMLWriter (xml: string) {\n    let blob = new Blob([xml], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    FileSaver.saveAs( blob, 'Network.xml' );\n}\n","import REAReader from \"../../app/IO/rea\";\nimport SBMLReader from \"../../app/IO/sbml\";\nimport { setChangedText } from \"../../app/state/appState\";\nimport { setReaction, setSpecies } from \"../../app/state/networkState\";\nimport { store } from \"../../app/store\";\nimport { FileType } from \"./recognizeType\";\n\nexport default function readFile() {\n    const state = store.getState().app_reducer;\n    const text = state.text;\n    const filetype = state.currentFileType;\n\n    const { species, reactions } = filetype === FileType.REA ? REAReader(text) : SBMLReader(text);\n    \n    store.dispatch(setChangedText(false));\n    store.dispatch(setSpecies(species));\n    store.dispatch(setReaction(reactions));\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/network.worker.e4b37d35.js\");\n}\n","import * as Comlink from 'comlink';\nimport { EdgeDefinition, NodeDefinition } from 'cytoscape';\nimport { setNetworkGraph, setRunning } from '../../app/state/appState';\nimport { store } from '../../app/store';\nimport networkAPI, { NetworkWorker } from './network.worker';\n\nexport default function generateReactionNetwork() {\n    store.dispatch(setRunning(1));\n    const state = store.getState().network_reducer;\n    const species = Object.keys(state.species);\n    const reactionList = new Int8Array(Object.values(state.reactions).map(reaction => Array.from(reaction.stoichiometry)).flat());\n    const worker: Comlink.Remote<NetworkWorker> = Comlink.wrap(new networkAPI());\n    worker.generateGraph(species, reactionList.buffer, Comlink.proxy(callback));\n}\n\nfunction callback(nodes: NodeDefinition[], edges: EdgeDefinition[], error: any | undefined): void {\n    if(error) {\n        alert(error + '\\n\\nCheck the console for more information.');\n    } else {\n        store.dispatch(setNetworkGraph([...nodes, ...edges]));\n        store.dispatch(setRunning(-1));\n    }\n    \n}\n","import { GLPK, LP } from \"glpk.js\";\nimport { Organization, Reaction, Species } from \"../../app/\";\n\nfunction contains(largeSet: number[], smallSet: number[]): boolean {\n    for(let i = 0; i < smallSet.length; i++) {\n        if(smallSet[i] > 0) {\n            if(largeSet[i] !== 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport function generateOrganizations(\n    semiOrganization: number[], \n    numberOfOrganizations: number,\n    speciesList: Species[], \n    reactionList: Reaction[],\n    glpk: GLPK\n): Organization | undefined {\n    let numberOfReactionsInvolved = 0;\n    let entryCount = 1;\n\n    for(let j = 0; j < reactionList.length; j++) {\n        if(contains(semiOrganization.slice(1), reactionList[j].stoichiometry.slice(0, speciesList.length))) {\n            numberOfReactionsInvolved++;\n        }\n    }\n    if(numberOfReactionsInvolved > 0) {\n        \n        const lp: LP = glp_create_prob(glpk, 'linear_programming_problem');\n        const ia: number[] = [];\n        const ja: number[] = [];\n        const ar: number[] = [];\n        glp_add_cols(lp, numberOfReactionsInvolved);\n        for(let j = 0  ; j < numberOfReactionsInvolved; j++) {\n            glp_set_col_bnds(lp, j, glpk.GLP_LO, 1.0, 0.0);\n            glp_set_obj_coef(lp, j, 0.0);\n        }\n\n        let species_position = 0;\n        for(let j = 1; j <= speciesList.length; j++) {\n            if(semiOrganization[j] !== 0) {\n                let reac_pos = 0;\n                \n\n                for(let k = 0; k < reactionList.length; k++) {\n                    if(contains(semiOrganization.slice(1), reactionList[k].stoichiometry.slice(0, speciesList.length))) {\n                        \n                        if(reactionList[k].stoichiometry.slice(0, speciesList.length) !== reactionList[k].stoichiometry.slice(speciesList.length)) {\n                            entryCount++;\n                            ia.push(species_position);\n                            ja.push(reac_pos);\n                            ar.push(reactionList[k].stoichiometry.slice(speciesList.length)[j-1] - reactionList[k].stoichiometry.slice(0, speciesList.length)[j-1]);\n                        }\n                        reac_pos++;\n                    }\n                }\n                species_position++;\n            }\n        }\n        glp_add_rows(lp, species_position);\n\n        for(let j = 0; j < species_position; j++) {\n            glp_set_row_bnds(lp, j, glpk.GLP_LO, 0.0, 0.0);\n        }\n\n        glp_load_matrix(lp, entryCount-1, ia, ja, ar);\n        //console.log(lp);\n        const result = glpk.solve(lp);\n        let bool = !(result.result.status === 1 || result.result.status === 3 || result.result.status === 4)\n        if(bool) {\n            return generateOrgVar(semiOrganization, reactionList, speciesList, numberOfOrganizations);\n        } else {\n            return undefined;\n        }\n    }\n    return generateOrgVar(semiOrganization, reactionList, speciesList, numberOfOrganizations);\n}\n\nfunction generateOrgVar(semiOrganization: number[], reactionList: Reaction[], speciesList: Species[], numberOfOrganizations: number): Organization {\n    const org: Organization = {\n        id: `O${numberOfOrganizations}`,\n        species: [],\n        reactions: reactionsOfInterest(semiOrganization, reactionList, speciesList),\n        stoichiometry: generateStochiometriy(semiOrganization, reactionList, speciesList)\n    };\n    for(let i = 1; i < semiOrganization.length; i++) {\n        if(semiOrganization[i] !== 0) {\n            org.species.push(speciesList[i-1]);\n        }\n        \n    }\n    return org;\n}\n\nfunction generateStochiometriy(semiOrg: number[], reactionList: Reaction[], speciesList: Species[]): number[][] {\n    let  matrix: number[][] = [];\n    for (const reaction of reactionList) {\n        const reactants = reaction.stoichiometry.slice(0,speciesList.length);\n        const products = reaction.stoichiometry.slice(speciesList.length, speciesList.length*2);\n\n        const row = [];\n        for (let i = 0; i < reactants.length; i++) {\n            row.push(products[i]-reactants[i]);\n        }\n        matrix.push(row);\n    }\n    matrix = transpose(matrix);\n    return matrix;\n}\n\nfunction transpose(matrix: number[][]) {\n    const rows = matrix.length, cols = matrix[0]?.length | 0;\n    const grid = [];\n    for (let j = 0; j < cols; j++) {\n      grid[j] = Array(rows);\n    }\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[j][i] = matrix[i][j];\n      }\n    }\n    return grid;\n}\n\nfunction reactionsOfInterest(set: number[], reactionList: Reaction[], speciesList: Species[]): Reaction[] {\n    const reactions: Reaction[] = [];\n    for(const reaction of reactionList) {\n        const educts = reaction.stoichiometry.slice(0,speciesList.length);\n        if(contains(set.slice(1), educts)) {\n            reactions.push(reaction);\n        }\n    }\n\n    return reactions;\n}\n\n\nfunction glp_create_prob(glpk: GLPK, name: string): LP {\n    const newLP: LP = {\n        name: name,\n        options: {\n            presol: true,\n            msglev: glpk.GLP_MSG_OFF\n        },\n        objective: {\n            direction: glpk.GLP_MAX,\n            name: 'obj',\n            vars: [],\n        },\n        subjectTo: [],\n        bounds: []\n    };\n\n    return newLP;\n}\n\nfunction glp_add_cols(lp: LP, count: number): void {\n    for(let i = 0; i < count; i++) {\n        lp.objective.vars.push({name: `r${i}`, coef: 0})\n        lp.bounds?.push({name: `r${i}`, type: 0, ub: 0, lb: 0});\n    }\n}\n\nfunction glp_add_rows(lp: LP, count: number): void {\n    for(let i = 0; i < count; i++) {\n        let vars: {name: string; coef: number}[] = new Array(lp.objective.vars.length);\n        for(let j =0; j < vars.length; j++) {\n            vars[j] = {name: `r${j}`, coef: 0};\n        }\n        lp.subjectTo.push(\n            {\n                name: `s${i}`, \n                vars: vars, \n                bnds: {type: 0, ub: 0, lb: 0}\n            }\n        );\n    }\n}\n\nfunction glp_set_col_bnds(lp: LP, column: number, type: number, lb: number, ub: number): void {\n    if(lp.bounds) {\n        lp.bounds[column].type = type;\n        lp.bounds[column].lb = lb;\n        lp.bounds[column].ub = ub;\n    }\n}\n\nfunction glp_set_row_bnds(lp: LP, row: number, type: number, lb: number, ub: number): void {\n    lp.subjectTo[row].bnds.type = type;\n    lp.subjectTo[row].bnds.lb = lb;\n    lp.subjectTo[row].bnds.ub = ub;\n}\n\nfunction glp_set_obj_coef(lp: LP, object: number, coef: number): void {\n    lp.objective.vars[object].coef = coef;\n}\n\nfunction glp_load_matrix(lp: LP, entryCount: number, ia: number[], ja: number[], ar: number[]): void {\n    for(let i = 0; i < entryCount; i++) {\n        lp.subjectTo[ia[i]].vars[ja[i]].coef = ar[i];\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/organization.worker.cdd37f99.js\");\n}\n","import * as Comlink from 'comlink';\nimport { GLPK } from \"glpk.js\";\nimport { Organization, Reaction, Species } from '../../app/';\nimport { setOrgList, setRunning } from '../../app/state/appState';\nimport { setOrganizations, setSemiOrganizations } from '../../app/state/networkState';\nimport { store } from '../../app/store';\nimport { generateOrganizations } from './computeOrgs';\nimport organizationAPI, { OrganizationWorker } from './organization.worker';\n\nexport default function calculateOrganizations(connected: boolean) {\n\n    store.dispatch(setRunning(1));\n\n    const state = store.getState();\n    const verbose = state.app_reducer.verbose;\n    // if(verbose) {\n        console.time('calculateOrganizations');\n    // }\n    const species = Object.values(state.network_reducer.species);\n    const reactionList = Object.values(state.network_reducer.reactions);\n    const worker: Comlink.Remote<OrganizationWorker> = Comlink.wrap(new organizationAPI());\n    \n    worker.calculateOrganizations(connected, verbose, species, reactionList, Comlink.proxy(callback));\n}\n\nfunction callback(semiOrganizations: number[], verbose: boolean, error: any | undefined): void {\n    if(error) {\n        alert(error + '\\n\\nCheck the console for more information.');\n    }\n    require('glpk.js').then((glpk: GLPK) => {\n        const state = store.getState();\n        const species = Object.values(state.network_reducer.species);\n        const reactions = Object.values(state.network_reducer.reactions);\n        const numberOfSpecies = species.length;\n        let _semiOrganizations: Organization[] = [];\n        let organizations: Organization[] = [];\n        \n        \n            \n        for(let i = 0; i < semiOrganizations.length; i += numberOfSpecies+1) {\n            const semiOrg = semiOrganizations.slice(i, i+numberOfSpecies+1);\n            const index = organizations.length+1;\n            _semiOrganizations.push({\n                id: `SO${i/(numberOfSpecies+1)}`,\n                species: setToSpeciesArray(semiOrg, species),\n                reactions: reactionsOfInterest(semiOrg, reactions, species),\n                stoichiometry: generateStochiometriy(semiOrg, reactions, species)\n            });\n            const organization = generateOrganizations(semiOrg, index, species, reactions, glpk);\n            \n            if(organization) {\n                if(verbose) {\n                    console.log(organization as Organization)\n                }\n                organizations.push(organization as Organization);\n            }\n        }\n        \n        store.dispatch(setSemiOrganizations(_semiOrganizations));\n        store.dispatch(setOrganizations(organizations));\n        store.dispatch(setOrgList(organizations.length));\n        store.dispatch(setRunning(-1));\n        if(verbose) {\n            console.log(store.getState());\n        }\n\n        // if(verbose) {\n        console.timeEnd('calculateOrganizations')\n        // }\n    });\n}\n\nfunction setToSpeciesArray(set: number[], speciesList: Species[]) {\n    const result: Species[] = [];\n    \n    for (let index = 1; index < set.length; index++) {\n        if(set[index] !== 0) {\n            result.push(speciesList[index-1]);\n        }\n        \n    }\n    \n    return result;\n}\n\nfunction reactionsOfInterest(set: number[], reactionList: Reaction[], speciesList: Species[]): Reaction[] {\n    const reactions: Reaction[] = [];\n    for(const reaction of reactionList) {\n        const educts = reaction.stoichiometry.slice(0,speciesList.length);\n        if(contains(set.slice(1), educts)) {\n            reactions.push(reaction);\n        }\n    }\n\n    return reactions;\n}\n\nfunction contains(largeSet: number[], smallSet: number[]): boolean {\n    for(let i = 0; i < smallSet.length; i++) {\n        if(smallSet[i] > 0) {\n            if(largeSet[i] !== 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction generateStochiometriy(semiOrg: number[], reactionList: Reaction[], speciesList: Species[]): number[][] {\n    let  matrix: number[][] = [];\n    for (const reaction of reactionList) {\n        const reactants = reaction.stoichiometry.slice(0,speciesList.length);\n        const products = reaction.stoichiometry.slice(speciesList.length, speciesList.length*2);\n\n        const row = [];\n        for (let i = 0; i < reactants.length; i++) {\n            row.push(products[i]-reactants[i]);\n        }\n        matrix.push(row);\n    }\n    matrix = transpose(matrix);\n    return matrix;\n}\n\nfunction transpose(matrix: number[][]) {\n    const rows = matrix.length, cols = matrix[0]?.length | 0;\n    const grid = [];\n    for (let j = 0; j < cols; j++) {\n      grid[j] = Array(rows);\n    }\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[j][i] = matrix[i][j];\n      }\n    }\n    return grid;\n  }\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/graph.worker.7da6dd68.js\");\n}\n","import * as Comlink from 'comlink';\nimport { EdgeDefinition, NodeDefinition } from 'cytoscape';\nimport { Species } from '../../app/';\nimport { setLatticeGraph, setRunning } from '../../app/state/appState';\nimport { store } from '../../app/store';\nimport graphAPI, { GraphWorker } from './graph.worker';\n\nexport default function generateLattice(nodes?: NodeDefinition[], edges?: EdgeDefinition[]) {\n    store.dispatch(setRunning(1));\n    const state = store.getState().network_reducer;\n    const speciesList = Object.values(state.species);\n    const organizations = state.organizations.map(organization => speciesArrayToIndexArray(organization.species, speciesList));\n    const worker: Comlink.Remote<GraphWorker> = Comlink.wrap(new graphAPI());\n    if(nodes && edges) {\n        worker.setGraph(nodes, edges);\n    }\n    worker.generateGraph(organizations, speciesList, Comlink.proxy(callback));\n}\n\nfunction callback(nodes: NodeDefinition[], edges: EdgeDefinition[], error: any | undefined): void {\n    if(error) {\n        alert(error + '\\n\\nCheck the console for more information.');\n    } else {\n        store.dispatch(setLatticeGraph([...nodes, ...edges]));\n        store.dispatch(setRunning(-1));\n    }\n}\n\n\nfunction speciesArrayToIndexArray(species: Species[], speciesList: Species[]): number[] {\n    const arr: number[] = [];\n    for(const element of species) {\n        arr.push(speciesToIndex(element, speciesList));\n    }\n    return arr;\n}\n\nfunction speciesToIndex(species: Species, speciesList: Species[]): number {\n    return speciesList.findIndex((element) => element.uid === species.uid);\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/orgml.worker.947b3209.js\");\n}\n","import * as Comlink from 'comlink';\nimport { EdgeDefinition } from 'cytoscape';\nimport FileSaver from 'file-saver';\nimport { store } from '../../app/store';\nimport { setRunning } from '../state/appState';\nimport orgmlAPI, { OrgMLWorker } from './orgml.worker';\n\nexport default function generateOrgML() {\n    store.dispatch(setRunning(1));\n\n    const state = store.getState();\n    const organizations = state.network_reducer.organizations;\n    const edges = state.app_reducer.latticeGraph.slice(organizations.length) as EdgeDefinition[];\n    const worker: Comlink.Remote<OrgMLWorker> = Comlink.wrap(new orgmlAPI());\n    worker.generateOrgMLString(organizations, edges, Comlink.proxy(callback));\n}\n\nfunction callback(orgml: string): void {\n    let blob = new Blob([orgml], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    FileSaver.saveAs( blob, 'orgml_org.xml' );\n    store.dispatch(setRunning(-1));\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/lattice.worker.d5e86fa0.js\");\n}\n","import * as Comlink from 'comlink';\nimport { EdgeDefinition } from 'cytoscape';\nimport FileSaver from 'file-saver';\nimport { store } from '../../app/store';\nimport { setRunning } from '../state/appState';\nimport latticeAPI, { LatticeWorker } from './lattice.worker';\n\nexport default function generateLatticeFile() {\n    store.dispatch(setRunning(1));\n\n    const state = store.getState();\n    const organizations = state.network_reducer.organizations;\n    const edges = state.app_reducer.latticeGraph.slice(organizations.length) as EdgeDefinition[];\n    const worker: Comlink.Remote<LatticeWorker> = Comlink.wrap(new latticeAPI());\n    worker.generateLatticeString(organizations, edges, Comlink.proxy(callback));\n}\n\nfunction callback(lattice: string): void {\n    let blob = new Blob([lattice], {\n        type: \"text/plain;charset=utf-8\"\n    });\n    FileSaver.saveAs( blob, 'lattice.ltc' );\n    store.dispatch(setRunning(-1));\n}\n","import { REAWriter } from \"../../app/IO/rea\";\nimport { SBMLWriter } from \"../../app/IO/sbml\";\nimport { store } from \"../../app/store\";\nimport { FileType } from \"./recognizeType\";\n\nexport default function writeFile() {\n    const state = store.getState().app_reducer;\n    const text = state.text;\n    const filetype = state.currentFileType;\n\n    filetype === FileType.REA ? REAWriter(text) : SBMLWriter(text);\n}\n","import React from 'react';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\nimport TrendingFlatIcon from '@mui/icons-material/TrendingFlat';\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\nimport ScatterPlotIcon from '@mui/icons-material/ScatterPlot';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CachedIcon from '@mui/icons-material/Cached';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CreateIcon from '@mui/icons-material/Create';\nimport ImageIcon from '@mui/icons-material/Image';\nimport OpenInBrowserIcon from '@mui/icons-material/OpenInBrowser';\nimport { clearAppState, setChangedText, setCurrentWindow, setText } from '../app/state/appState';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport { Collapse, List } from '@mui/material';\nimport readFile from '../features/editor/readFile';\nimport generateReactionNetwork from '../features/reaction_network/generateNetwork';\nimport calculateOrganizations from '../features/organizations/calculateOrganizations';\nimport generateLattice from '../features/lattice/generateGraph';\nimport generateOrgML from '../app/IO/orgmlExport';\nimport generateLatticeFile from '../app/IO/latticeExport';\nimport writeFile from '../features/editor/writeFile';\nimport { LabelImportant } from '@mui/icons-material';\nimport fileDialog from 'file-dialog';\nimport { clearState } from '../app/state/networkState';\n\nconst primary = '#002350';\nconst secondary = '#33393961';\n\ninterface ListItemProps {\n  saveNetworkImage: () => void;\n  saveLatticeImage: () => void;\n}\n\nexport function MainListItems(props: ListItemProps) {\n  const dispatch = useAppDispatch();\n\n  const title = useAppSelector(state => state.app_reducer.currentWindow);\n  const orgCount = useAppSelector(state => state.network_reducer.organizations.length);\n  const latticeDrawn = useAppSelector(state => state.app_reducer.latticeGraph.length);\n  const networkDrawn = useAppSelector(state => state.app_reducer.networkGraph.length);\n  const changed = useAppSelector(state => state.app_reducer.changedText);\n\n  const [openE, setOpenE] = React.useState(true);\n  const [openRN, setOpenRN] = React.useState(false);\n  const [openLtc, setOpenLtc] = React.useState(false);\n  const [openOrg, setOpenOrg] = React.useState(false);\n\n  const handleClick = (value: string) => {\n    dispatch(setCurrentWindow(value));\n    if(value === 'Editor') {\n      setOpenE(true);\n      setOpenRN(false);\n      setOpenLtc(false);\n      setOpenOrg(false);\n    } else if(value === 'Reaction Network') {\n      setOpenE(false);\n      setOpenRN(true);\n      setOpenLtc(false);\n      setOpenOrg(false);\n    } else if (value === 'Lattice') {\n      setOpenE(false);\n      setOpenRN(false);\n      setOpenLtc(true);\n      setOpenOrg(false);\n    } else {\n      setOpenE(false);\n      setOpenRN(false);\n      setOpenLtc(false);\n      setOpenOrg(true);\n    }\n  }\n\n  const openFile = () => {\n    fileDialog({multiple: false, accept: ['.rea', 'text/xml']}, file => {\n      file[0].text().then(result => {\n        dispatch(clearState());\n        dispatch(clearAppState());\n        dispatch(setChangedText(true));\n        dispatch(setText(result));\n      });\n    });\n  }\n\n  const listLabel = (current: string) => {\n    if(title === current) {\n      return <ListItemText primary={current} sx={{ color: primary}}/>\n    } else {\n      return <ListItemText primary={current} sx={{ color: secondary}}/>\n    }\n  };\n  const listIcon = (\n    current: string,\n    icon:JSX.Element\n    ) => {\n      if(title === current) {\n        return ( <ListItemIcon sx={{ color: primary}}>{icon}</ListItemIcon> );\n      } else {\n        return ( <ListItemIcon sx={{ color: secondary}}>{icon}</ListItemIcon> );\n      }\n  };\n\n  return (\n    <List>\n      <ListItem button onClick={()=>{handleClick('Editor')}}>\n        {listIcon('Editor', <TextFieldsIcon />)}\n        {listLabel('Editor')}\n        {openE ? <ExpandLess sx={{color: primary}}/> : <ExpandMore sx={{color: secondary}}/>}\n      </ListItem>\n      <Collapse in={openE} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItem button sx={{ pl: 4 }} onClick={() => openFile()}>\n            <ListItemIcon sx={{ color: primary}}>\n              <OpenInBrowserIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Open File\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem button sx={{ pl: 4 }} onClick={() => writeFile()}>\n            <ListItemIcon sx={{ color: primary}}>\n              <DownloadIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Save File\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem disabled button sx={{ pl: 4 }} onClick={() => writeFile()}>\n            <ListItemIcon sx={{ color: primary}}>\n              <CachedIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Convert File\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem button sx={{ pl: 4 }} onClick={() => readFile()}>\n            <ListItemIcon sx={{ color: changed ? '#BC4A09' : primary}}>\n              <LabelImportant />\n            </ListItemIcon>\n            <ListItemText primary=\"Read\" sx={{ color: changed ? '#BC4A09' : primary}}/>\n          </ListItem>\n        </List>\n      </Collapse>\n      <ListItem button onClick={()=>{handleClick('Reaction Network');}}>\n        {listIcon('Reaction Network', <TrendingFlatIcon />)}\n        {listLabel('Reaction Network')}\n        {openRN ? <ExpandLess sx={{color: primary}}/> : <ExpandMore sx={{color: secondary}}/>}\n      </ListItem>\n      <Collapse in={openRN} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItem button sx={{ pl: 4 }} onClick={() => {generateReactionNetwork();}}>\n            <ListItemIcon sx={{ color: primary}}>\n              <CreateIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Draw Network Graph\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem disabled={networkDrawn > 0 ? false : true} button sx={{ pl: 4 }} onClick={() => props.saveNetworkImage()}>\n            <ListItemIcon sx={{ color: primary}}>\n              <ImageIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Save Image\" sx={{ color: primary}}/>\n          </ListItem>\n        </List>\n      </Collapse>\n      <ListItem button onClick={()=>{handleClick('Lattice')}}>\n        {listIcon('Lattice', <AccountTreeIcon style={{ transform: 'rotate(90deg)' }} />)}\n        {listLabel('Lattice')}\n        {openLtc ? <ExpandLess sx={{color: primary}}/> : <ExpandMore sx={{color: secondary}}/>}\n      </ListItem>\n      <Collapse in={openLtc} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItem disabled={orgCount > 0 ? false : true} button sx={{ pl: 4 }} onClick={() => {generateLattice();}}>\n            <ListItemIcon sx={{ color: primary}}>\n              <CreateIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Draw Lattice\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem disabled={latticeDrawn > 0 ? false : true} button sx={{ pl: 4 }} onClick={() => {generateLatticeFile()}}>\n            <ListItemIcon sx={{ color: primary}}>\n              <DownloadIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Save Lattice\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem disabled={latticeDrawn > 0 ? false : true} button sx={{ pl: 4 }} onClick={() => props.saveLatticeImage()}>\n            <ListItemIcon sx={{ color: primary}}>\n              <ImageIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Save Image\" sx={{ color: primary}}/>\n          </ListItem>\n        </List>\n      </Collapse>\n      <ListItem button onClick={()=>{handleClick('Organizations')}}>\n        {listIcon('Organizations', <ScatterPlotIcon />)}\n        {listLabel('Organizations')}\n        {openOrg ? <ExpandLess sx={{color: primary}}/> : <ExpandMore sx={{color: secondary}}/>}\n      </ListItem>\n      <Collapse in={openOrg} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItem button sx={{ pl: 4 }} onClick={() => {calculateOrganizations(false)}}>\n            <ListItemIcon sx={{ color: primary}}>\n              <SearchIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Find Organizations\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem button sx={{ pl: 4 }} onClick={() => {calculateOrganizations(true)}}>\n            <ListItemIcon sx={{ color: primary}}>\n              <SearchIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Find Connected Orgs\" sx={{ color: primary}}/>\n          </ListItem>\n          <ListItem disabled={orgCount > 0 && latticeDrawn > 0 ? false : true} button sx={{ pl: 4 }} onClick={() => {generateOrgML()}}>\n            <ListItemIcon sx={{ color: primary}}>\n              <DownloadIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Save Organizations\" sx={{ color: primary}}/>\n          </ListItem>\n        </List>\n      </Collapse>\n    </List>\n  );\n}\n","import React, {useCallback} from 'react';\nimport Editor, { Monaco, useMonaco } from '@monaco-editor/react';\nimport { useDropzone } from 'react-dropzone'\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { clearAppState, setChangedText, setText } from '../../app/state/appState';\nimport { FileType } from './recognizeType';\nimport { store } from '../../app/store';\nimport { clearState } from '../../app/state/networkState';\n\nexport function Dropzone() {\n    const dispatch = useAppDispatch();\n    const monaco = useMonaco();\n    const text = useAppSelector(state => state.app_reducer.text);\n    const currentType = FileType[useAppSelector(state => state.app_reducer.currentFileType)].toString().toLowerCase();\n\n    // const dropzoneRef: React.RefObject<DropzoneState> = createRef();\n    // const openDialog = () => {\n    //   // Note that the ref is set async,\n    //   // so it might be null at some point \n    //   if (dropzoneRef.current) {\n    //     dropzoneRef.current.open()\n    //   }\n    // };\n\n    const onDrop = useCallback((acceptedFiles) => {\n      const updateText = (text: string) => {\n        console.log(\"ClearedNetworkState\");\n        dispatch(clearState());\n        dispatch(clearAppState());\n        dispatch(setChangedText(true));\n        dispatch(setText(text));\n        monaco?.editor.setTheme(`org-theme-${FileType[store.getState().app_reducer.currentFileType].toLowerCase()}`);\n\n      }\n  \n      acceptedFiles.forEach((file: Blob) => {\n        const reader = new FileReader()\n  \n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n          const decoder = new TextDecoder(\"utf-8\");\n          const binaryStr = reader.result\n          if(binaryStr instanceof ArrayBuffer) {\n            updateText(decoder.decode(binaryStr));\n          }\n          \n        }\n        reader.readAsArrayBuffer(file)\n      })\n      \n    }, [dispatch, monaco?.editor]);\n  \n    const {getRootProps, getInputProps} = useDropzone({onDrop, noClick: true});\n    \n    \n    const handleEditorChange = (value: string | undefined, event: any) => {\n      if (value) {\n        dispatch(setChangedText(true));\n        dispatch(setText(value));\n        console.log(`org-theme-${FileType[store.getState().app_reducer.currentFileType].toLowerCase()}`);\n        monaco?.editor.setTheme(`org-theme-${FileType[store.getState().app_reducer.currentFileType].toLowerCase()}`);\n      }\n    }\n  \n    const options = {\n      minimap: {enabled: false}\n    }\n  \n    const editorWillMount = (monaco: Monaco) => {\n      monaco.languages.register({ id: 'rea' });\n\n      monaco.languages.setMonarchTokensProvider('rea', {\n        tokenizer: {\n          root: [\n            [/->/, \"reaction\"],\n            [/# Components/, \"components\"],\n            [/# Number of Components/, \"component-count\"],\n            [/# Reactions/, \"reactions\"],\n            [/# Number of Reactions/, \"reaction-count\"],\n            [/[0-9.]+ /, \"stoichiometry\"],\n            [/#.*/, \"comment\"],\n          ]\n        }\n      });\n\n      monaco.editor.defineTheme('org-theme-rea', {\n        base: 'vs',\n        inherit: true,\n        rules: [\n          { token: 'comment', foreground: '303030' },\n          { token: 'components', foreground: '550000', fontStyle: 'bold' },\n          { token: 'component-count', foreground: '550000', fontStyle: 'bold' },\n          { token: 'reactions', foreground: '550000', fontStyle: 'bold' },\n          { token: 'reaction-count', foreground: '550000', fontStyle: 'bold' },\n          { token: 'reaction', foreground: 'FFA500' },\n          { token: 'stoichiometry', foreground: '008800' },\n        ],\n        colors: {\n          'editor.background': '#eee',\n          'editor.lineHighlightBackground': '#eee',\n          'editorLineNumber.foreground': '#008800',\n        }\n      });\n      monaco.editor.defineTheme('org-theme-xml', {\n        base: 'vs',\n        inherit: true,\n        rules: [],\n        colors: {\n          'editor.background': '#eee',\n          'editor.lineHighlightBackground': '#eee',\n          'editorLineNumber.foreground': '#008800',\n        }\n      });\n    }\n\n    return (\n      <div {...getRootProps()} style={{\n        height: '100%'\n      }}>\n        <input {...getInputProps()} />\n        <Editor\n          width='100%'\n          height='100%'\n          theme={`org-theme-${currentType}`}\n          options={options}\n          defaultLanguage={currentType}\n          onChange={handleEditorChange}\n          beforeMount={editorWillMount}\n          value={text}\n          key={currentType}\n        />\n      </div>\n    )\n  }\n","import FileSaver from \"file-saver\";\n\nexport default function saveAsImage(svgContent: BlobPart) {\n    let imgBlob = new Blob([svgContent], {type:\"image/svg+xml;charset=utf-8\"});\n\n    FileSaver.saveAs( imgBlob, 'graph.svg' );\n}\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport svg from 'cytoscape-svg';\nimport { store } from \"../../app/store\";\nimport saveAsImage from \"../../app/IO/saveImage\";\n\ntype CytoscapeProps = {\n    elements?: (cytoscape.NodeDefinition | cytoscape.EdgeDefinition)[];\n}\n\nexport type CytoscapeHandle = {\n    draw: () => void;\n    takeImage: () => void;\n    toggleGrabbable: () => void;\n}\nconst ReactionNetwork: React.ForwardRefRenderFunction<CytoscapeHandle, CytoscapeProps> = (props, ref) => {\n    const container = useRef<HTMLDivElement>(null);\n    const graph = useRef<cytoscape.Core>();\n    const layout = useRef<cytoscape.Layouts>();\n\n    const nodeStyle: cytoscape.Stylesheet[] = [\n        {\n            selector: 'node',\n            style: {\n                'shape': 'rectangle',\n            }\n        },\n        {\n            selector: 'node[label]',\n            style: {\n                'background-color': '#f00',\n                'background-opacity': 0,\n                'shape': 'rectangle',\n                // 'width': '50px',\n                // 'height': '30px',\n                'label': 'data(id)',\n                'text-valign': 'top',\n                'text-halign': 'center',\n                'text-opacity': 0,\n                'border-opacity': 0,\n            }\n        },\n        {\n            selector: 'node[color]',\n            style: {\n                'background-color': '#fff',\n                'shape': 'rectangle',\n                'label': 'data(id)',\n                'width': '55px',\n                'height': '30px',\n                'color': 'data(color)',\n                'text-valign': 'center',\n                'text-halign': 'center',\n                'border-color': '#000',\n                'border-width': 2,\n                'border-style': 'solid',\n            }\n        },\n    ];\n    const edgeStyle: cytoscape.Stylesheet[] = [{\n        selector: 'edge',\n        style: {\n            'width': 3,\n            'line-color': '#ccc',\n            'label': 'data(label)',\n            'curve-style': 'bezier',\n            'control-point-step-size': 50,\n            'source-endpoint': 'inside-to-node',\n        }\n    }, {\n        selector: 'edge[products]',\n        style: {\n            'target-arrow-shape': 'triangle-backcurve',\n        }\n    }, {\n        selector: 'edge[educts]',\n        style: {\n            'target-endpoint': 'inside-to-node',\n        }\n    }, {\n        selector: 'edge[outflow]',\n        style: {\n            'target-arrow-shape': 'triangle-backcurve',\n        }\n    }];\n\n    const style: cytoscape.Stylesheet[] = [...nodeStyle, ...edgeStyle];\n\n    useEffect(() => {\n        const _elements = store.getState().app_reducer.networkGraph;\n        if(_elements !== []) {\n            try {\n                if (!graph.current) {\n                    cytoscape.use(svg);\n                    graph.current = cytoscape({\n                        elements: _elements,\n                        style: style,\n                        container: container.current\n                    });\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            if (graph.current) {\n                if (layout.current) {\n                    layout.current.stop();\n                } else {\n                    redrawGraph(_elements);\n                }\n                graph.current.addListener('layoutstop', () => {\n                    redrawGraph(_elements);\n                });\n            }else {\n\n            }\n        }\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useImperativeHandle(ref, ()=> ({\n        draw() {\n            const _elements = store.getState().app_reducer.networkGraph;\n            try {\n                if (!graph.current) {\n                    cytoscape.use(svg);\n                    graph.current = cytoscape({\n                        elements: _elements,\n                        style: style,\n                        container: container.current\n                    });\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            if (graph.current) {\n                if (layout.current) {\n                    layout.current.stop();\n                } else {\n                    redrawGraph(_elements);\n                }\n                graph.current.addListener('layoutstop', () => {\n                    redrawGraph(_elements);\n                });\n            }else {\n    \n            }\n        },\n        takeImage() {\n            if (graph.current) {\n                cytoscape.use( svg );\n                //@ts-ignore\n                saveAsImage(graph.current.svg({full: true, scale: 1}))\n            }\n        },\n        toggleGrabbable() {\n            // const state = store.getState().app_reducer;\n            // if (graph.current) {\n            //     if(state.grabbable){\n            //         graph.current.elements().grabify();\n            //     } else {\n            //         graph.current.elements().ungrabify();\n            //     }\n            // }\n        }\n    }));\n\n    const ConcentricOptions = {name: 'concentric',\n        concentric: function( node: any ){\n            return node.data('level');\n        },\n        levelWidth: function( nodes: any ){\n            return 1;\n        },\n        minNodeSpacing: 15,\n    }\n\n    const redrawGraph = (_elements: (cytoscape.NodeDefinition | cytoscape.EdgeDefinition)[]) => {\n        if (graph.current) {\n            graph.current.destroy();\n            cytoscape.use(svg);\n            graph.current = cytoscape({\n                elements: _elements,\n                style: style,\n                container: container.current\n            });\n            layout.current = graph.current.elements().makeLayout(ConcentricOptions);\n            layout.current.run();\n        }\n    }\n\n    return (\n        <div className='graph' ref={container} style={{width: '100%', height: '100%'}} />\n    );\n}\n\nexport default forwardRef(ReactionNetwork);\n","import { ExpandLess, ExpandMore } from '@mui/icons-material';\nimport { Collapse, List, ListItem, ListItemText, ListSubheader, Typography } from '@mui/material';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { toggleOrgList } from '../../app/state/appState';\n\nexport default function OrganizationList() {\n    const dispatch = useAppDispatch();\n    const organizations = useAppSelector(state => state.network_reducer.organizations);\n    const hooks = useAppSelector(state => state.app_reducer.orgList);\n\n    const primary = '#002350';\n    const secondary = '#33393961';\n\n    return (\n        <List>\n            <ListSubheader sx={{color: primary, backgroundColor: '#eee'}}>Found {organizations.length} Organizations</ListSubheader>\n            {organizations.map(organization => {\n                const id = Number.parseInt(organization.id.slice(1))-1;\n                return (\n                    <div key={id}>\n                        <ListItem button onClick={()=>{dispatch(toggleOrgList(id))}}>\n                            <ListItemText primary={`Organization: ${organization.id}`} sx={{ color: primary}}/>\n                            {hooks[id] ? <ExpandLess sx={{color: primary}}/> : <ExpandMore sx={{color: secondary}}/>}\n                        </ListItem>\n                        <Collapse in={hooks[id]} timeout=\"auto\" unmountOnExit>\n                            <List component=\"div\" sx={{marginLeft: '50px'}}>\n                                <ListItemText primary=\"Species:\" sx={{ color: primary}}/>\n                                <Typography sx={{marginLeft: '20px', wordWrap: 'normal'}}>{organization.species.length === 0 ? '{}' : organization.species.map(s => {\n                                    return `${s.id}, `\n                                })}</Typography>\n                                <ListItemText primary=\"Reactions:\" sx={{ color: primary}}/>\n                                {organization.reactions.map(r => {\n                                    return (<Typography key={r.uid} sx={{marginLeft: '20px', wordWrap: 'normal'}}>{r.uid}</Typography>);\n                                })}\n                            </List>\n                        </Collapse>\n                    </div>\n                );\n            })}\n        </List>\n    );\n}\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport automove from \"cytoscape-automove\";\nimport svg from 'cytoscape-svg';\nimport dagre from 'cytoscape-dagre';\nimport { store } from \"../../app/store\";\nimport saveAsImage from \"../../app/IO/saveImage\";\nimport { CytoscapeHandle } from \"../reaction_network/reactionNetwork\";\nimport { NodeValues } from \"../../app/state/appState\";\nimport { useAppSelector } from \"../../app/hooks\";\n\n\ntype CytoscapeProps = {\n    elements?: (cytoscape.NodeDefinition | cytoscape.EdgeDefinition)[];\n}\n\nconst LatticeGraph: React.ForwardRefRenderFunction<CytoscapeHandle, CytoscapeProps> = (props, ref) => {\n    const container = useRef<HTMLDivElement>(null);\n    const graph = useRef<cytoscape.Core>();\n    const layout = useRef<cytoscape.Layouts>();\n\n    const nodeValue: NodeValues = useAppSelector(state => state.app_reducer.nodeView);\n\n    const options: dagre.DagreLayoutOptions = {\n        name: \"dagre\", \n        nodeSep: undefined, // the separation between adjacent nodes in the same rank\n        edgeSep: undefined, // the separation between adjacent edges in the same rank\n        rankSep: 100, // the separation between each rank in the layout\n        rankDir: 'TB', // 'TB' for top to bottom flow, 'LR' for left to right,\n        ranker: 'longest-path', // Type of algorithm to assign a rank to each node in the input graph. Possible values: 'network-simplex', 'tight-tree' or 'longest-path'\n        minLen: function( edge ){ return 2; }, // number of ranks to keep between the source and target of the edge\n        edgeWeight: function( edge ){ return 1; }, // higher weight edges are generally made shorter and straighter than lower weight edges\n\n        // general layout options\n        fit: true, // whether to fit to viewport\n        padding: 30, // fit padding\n        spacingFactor: 0.9, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n        nodeDimensionsIncludeLabels: true, // whether labels should be included in determining the space used by a node\n        animate: false, // whether to transition the node positions\n        animateFilter: function( node, i ){ return true; }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions\n        animationDuration: 500, // duration of animation in ms if enabled\n        animationEasing: undefined, // easing of animation if enabled\n        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        transform: function( node, pos ){ const num = Number.parseInt(node.data('rank')); return {x: pos.x, y: num * -80}; }, // a function that applies a transform to the final node position\n        ready: function(){}, // on layoutready\n        stop: function(){},\n    }\n\n    const nodeStyle: cytoscape.Stylesheet[] = [\n        {\n            selector: 'node',\n            style: {\n                'shape': 'rectangle',\n                'font-size': 12,\n                'background-color': '#fff',\n                'label': function(ele: cytoscape.NodeSingular){\n                    let dataStr = 'label';\n                    if(nodeValue===NodeValues.ALLSPECIES) {\n                        dataStr = 'all_species';\n                    } else if (nodeValue===NodeValues.NOVELTY) {\n                        dataStr = 'novelty_species';\n                    }\n                    return ele.data(dataStr);\n                },\n                'width': function(ele: cytoscape.NodeSingular){\n                    let dataStr = 'normalWidth';\n                    if(nodeValue===NodeValues.ALLSPECIES) {\n                        dataStr = 'all_species_width';\n                    } else if (nodeValue===NodeValues.NOVELTY) {\n                        dataStr = 'novelty_species_width';\n                    }\n                    return ele.data(dataStr);\n                },\n                'height': '30px',\n                'color': 'data(color)',\n                'text-valign': 'center',\n                'text-halign': 'center',\n                'border-color': '#000',\n                'border-width': 2,\n                'border-style': 'solid',\n            }\n        },\n    ];\n    const edgeStyle: cytoscape.Stylesheet[] = [{\n        selector: 'edge',\n        style: {\n            'width': 3,\n            'line-color': '#ccc',\n            'control-point-step-size': 50,\n            'source-endpoint': 'inside-to-node',\n        }\n    }];\n\n    const style: cytoscape.Stylesheet[] = [...nodeStyle, ...edgeStyle];\n\n    let defaults = {\n        nodesMatching: function( node: cytoscape.NodeSingular ){ return true; },\n        reposition: function( node: cytoscape.NodeSingular ){ const num = Number.parseInt(node.data('rank')); return {x: node.position('x'), y: num * -80}; },\n        when: 'matching',\n        meanIgnores: function( node: cytoscape.NodeSingular ){ return false; },\n        meanOnSelfPosition: function( node: cytoscape.NodeSingular ){ return true; },\n        dragWith: function( node: cytoscape.NodeSingular ){ return false; }\n      };\n       \n      let _options = defaults;\n       \n      \n\n    useEffect(() => {\n        const _elements = store.getState().app_reducer.latticeGraph;\n        if(_elements !== []) {\n            try {\n                if (!graph.current) {\n                    cytoscape.use(dagre);\n                    cytoscape.use(automove);\n                    cytoscape.use( svg );\n                    graph.current = cytoscape({\n                        elements: _elements,\n                        style: style,\n                        container: container.current\n                    });\n                    //@ts-ignore\n                    let rule = graph.current.automove(_options);\n                    rule.apply();\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            if (graph.current) {\n                if (layout.current) {\n                    layout.current.stop();\n                } else {\n                    redrawGraph(_elements);\n                }\n                graph.current.addListener('layoutstop', () => {\n                    redrawGraph(_elements);\n                });\n            }else {\n\n            }\n        }\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useImperativeHandle(ref, ()=> ({\n        draw() {\n            const _elements = store.getState().app_reducer.latticeGraph;\n            try {\n                if (!graph.current) {\n                    cytoscape.use(dagre);\n                    cytoscape.use(automove);\n                    cytoscape.use( svg );\n                    graph.current = cytoscape({\n                        elements: _elements,\n                        style: style,\n                        container: container.current\n                    });\n                    //@ts-ignore\n                    let rule = graph.current.automove(_options);\n                    rule.apply();\n                }\n            } catch (error) {\n                console.error(error);\n            }\n            if (graph.current) {\n                if (layout.current) {\n                    layout.current.stop();\n                } else {\n                    redrawGraph(_elements);\n                }\n                graph.current.addListener('layoutstop', () => {\n                    redrawGraph(_elements);\n                });\n            }else {\n    \n            }\n        },\n        takeImage() {\n            if (graph.current) {\n                //@ts-ignore\n                const svg_content = graph.current.svg({full: true, scale: 1});\n                saveAsImage(svg_content);\n            }\n        },\n        toggleGrabbable() {\n            // const state = store.getState().app_reducer;\n            // if (graph.current) {\n            //     if(state.grabbable){\n            //         graph.current.elements().grabify();\n            //     } else {\n            //         graph.current.elements().ungrabify();\n            //     }\n            // }\n        }\n    }));\n\n    const redrawGraph = (_elements: (cytoscape.NodeDefinition | cytoscape.EdgeDefinition)[]) => {\n        if (graph.current) {\n            graph.current.destroy();\n            graph.current = cytoscape({\n                elements: _elements,\n                style: style,\n                container: container.current\n            });\n            //@ts-ignore\n            let rule = graph.current.automove(_options);\n            rule.apply();\n            // layout.current = graph.current.elements().makeLayout({name: 'preset'});\n            layout.current = graph.current.elements().makeLayout(options);\n            layout.current.run();\n        }\n    }\n\n    return (\n        <div className='graph' ref={container} style={{width: '100%', height: '100%'}} />\n    );\n}\n\nexport default forwardRef(LatticeGraph);\n","import { FormControl, InputLabel, MenuItem, Select, SelectChangeEvent } from \"@mui/material\";\nimport { EdgeDefinition } from \"cytoscape\";\nimport React from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { NodeValues, setNodeView } from \"../app/state/appState\";\nimport generateLattice from \"../features/lattice/generateGraph\";\n\nexport function NodeViewDropdown() {\n    const dispatch = useAppDispatch();\n    const label = useAppSelector(state => state.app_reducer.nodeView);\n    const lattice = useAppSelector(state => state.app_reducer.latticeGraph);\n    const numOfOrgs = useAppSelector(state => state.app_reducer.orgList.length);\n\n    const handleChange = (event: SelectChangeEvent) => {\n        dispatch(setNodeView(parseInt(event.target.value)));\n        const nodes = lattice.slice(0, numOfOrgs);\n        const edges = lattice.slice(numOfOrgs) as EdgeDefinition[];\n        generateLattice(nodes, edges);\n    };\n    return (\n        <FormControl sx={{ m: 1, minWidth: 80 }}>\n            <InputLabel id=\"demo-simple-select-label\" sx={{color: '#BC4A09'}}>Node Label</InputLabel>\n            <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={label.toString()}\n                label=\"Node Label\"\n                onChange={handleChange}\n                sx={{color: '#fff'}}\n            >\n                <MenuItem value={NodeValues.ALLSPECIES}>Species</MenuItem>\n                <MenuItem value={NodeValues.NOVELTY}>Novelty species</MenuItem>\n                <MenuItem value={NodeValues.ORGNAMES}>Org index</MenuItem>\n            </Select>\n        </FormControl>\n    );\n}\n","import { AppBar } from './components/Appbar';\nimport React, { ElementRef, useRef } from 'react';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport {\n    Box,\n    Button,\n    Checkbox,\n    CircularProgress,\n    CssBaseline, \n    Dialog, \n    DialogActions, \n    DialogContent, \n    DialogTitle, \n    Divider,\n    IconButton,\n    Paper,\n    styled,\n    Toolbar,\n    Typography\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport MuiDrawer from '@mui/material/Drawer';\nimport { MainListItems } from './components/listItems';\nimport { Dropzone } from './features/editor/dropzone';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport ReactionNetwork, { CytoscapeHandle } from './features/reaction_network/reactionNetwork';\nimport { store } from './app/store';\nimport { EdgeDefinition, NodeDefinition } from 'cytoscape';\nimport OrganizationList from './features/organizations/organizationList';\nimport LatticeGraph from './features/lattice/latticeGraph';\nimport { toggleVerbose } from './app/state/appState';\nimport { NodeViewDropdown } from './components/nodeViewDropdown';\n\nconst drawerWidth: number = 280;\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n    ({ theme, open }) => ({\n        '& .MuiDrawer-paper': {\n                position: 'relative',\n                whiteSpace: 'nowrap',\n                width: drawerWidth,\n                transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            boxSizing: 'border-box',\n            ...(!open && {\n                overflowX: 'hidden',\n                transition: theme.transitions.create('width', {\n                    easing: theme.transitions.easing.sharp,\n                    duration: theme.transitions.duration.leavingScreen,\n                }),\n                width: theme.spacing(7),\n                [theme.breakpoints.up('sm')]: {\n                    width: theme.spacing(9),\n                },\n            }),\n        },\n    }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: string;\n    value: string;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        style={{height: '100%'}}\n        {...other}\n      >\n        {value === index && (\n          children\n        )}\n      </div>\n    );\n}\n\nconst mdTheme = createTheme();\ntype GraphHandle = ElementRef<typeof ReactionNetwork>\nlet networkRef: React.RefObject<CytoscapeHandle>;\ntype LatticeHandle = ElementRef<typeof LatticeGraph>\nlet latticeRef: React.RefObject<CytoscapeHandle>;\n\nexport default function Main() {\n    const [open, setOpen] = React.useState(false);\n    const [settingsOpen, setSettingsOpen] = React.useState(false);\n    const title = useAppSelector(state => state.app_reducer.currentWindow);\n    const running = useAppSelector(state => state.app_reducer.running);\n    const verbose = useAppSelector(state => state.app_reducer.verbose);\n\n    const dispatch = useAppDispatch();\n    \n    networkRef = useRef<GraphHandle>(null);\n    latticeRef = useRef<LatticeHandle>(null);\n\n    const toggleDrawer = () => {\n        setOpen(!open);\n    };\n\n    const handleClickOpen = () => {\n        setSettingsOpen(true);\n    };\n\n    const handleClose = (event: React.SyntheticEvent<unknown>, reason?: string) => {\n        if (reason !== 'backdropClick') {\n            setSettingsOpen(false);\n        }\n    };\n\n    const handleSaveImage = () => {\n        if(networkRef.current) {\n            networkRef.current.takeImage();\n        }\n    }\n\n    const handleSaveLatticeImage = () => {\n        if(latticeRef.current) {\n            latticeRef.current.takeImage();\n        }\n    }\n\n    let oldNetwork: (NodeDefinition | EdgeDefinition)[] = [];\n    let oldlattice: (NodeDefinition | EdgeDefinition)[] = [];\n    store.subscribe(() => {\n        const state = store.getState();\n        const currentNetwork = state.app_reducer.networkGraph;\n        const currentLattice = state.app_reducer.latticeGraph;\n        if(oldNetwork !== currentNetwork) {\n            networkRef.current?.draw();\n            oldNetwork = currentNetwork;\n        }\n        if(oldlattice !== currentLattice) {\n            if(latticeRef.current) {\n                latticeRef.current.draw();\n                oldlattice = currentLattice;\n            }\n            \n        }\n    });\n\n    return (\n        <ThemeProvider theme={mdTheme}>\n        <Box sx={{ display: 'flex' }}>\n            <CssBaseline />\n            <AppBar position=\"absolute\" open={open}>\n                <Toolbar\n                    sx={{\n                    pr: '24px', // keep right padding when drawer closed\n                    }}\n                >\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={toggleDrawer}\n                        sx={{\n                            marginRight: '36px',\n                            ...(open && { display: 'none' }),\n                        }}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Box sx={{ flexGrow: 1, display: 'flex' }}>\n                        <Typography\n                            component=\"h1\"\n                            variant=\"h6\"\n                            color=\"inherit\"\n                            noWrap\n                            sx={{paddingRight: \"25px\", marginTop: title==='Lattice' ? '3%': '0%'}}\n                        >\n                            {title}\n                        </Typography>\n                        {title==='Lattice' ? <NodeViewDropdown /> : <div></div>}\n                    </Box>\n                    <IconButton color=\"inherit\" onClick={handleClickOpen}>\n                        <SettingsIcon />\n                    </IconButton>\n                    <Dialog open={settingsOpen} onClose={handleClose}>\n                        <DialogTitle sx={{backgroundColor:'#eee'}}>Settings</DialogTitle>\n                        <DialogContent sx={{backgroundColor:'#eee'}}>\n                            <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap', backgroundColor:'#eee' }}>\n                                    <Typography sx={{marginTop: \"5%\"}}>Verbose Mode: </Typography>\n                                    <Checkbox \n                                        checked={verbose} \n                                        onChange={() => dispatch(toggleVerbose(!verbose))} \n                                        sx={{\n                                            marginLeft: \"5px\"\n                                        }}\n                                    />\n                            </Box>\n                        </DialogContent>\n                        <DialogActions sx={{backgroundColor:'#eee'}}>\n                            <Button onClick={handleClose}>Close</Button>\n                        </DialogActions>\n                    </Dialog>\n                </Toolbar>\n            </AppBar>\n            <Drawer variant=\"permanent\" open={open} sx={{backgroundColor: '#eee'}}>\n                <Paper sx={{\n                    backgroundColor: '#eee',\n                    height: '100vh'\n                }}>\n                    <Toolbar\n                        sx={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'flex-end',\n                        px: [1],\n                        backgroundColor: '#eee'\n                        }}\n                    >\n                        <IconButton onClick={toggleDrawer}>\n                            <ChevronLeftIcon />\n                        </IconButton>\n                    </Toolbar>\n                    <Divider />\n                    <MainListItems saveNetworkImage={handleSaveImage} saveLatticeImage={handleSaveLatticeImage}/>\n                    <div style={{position: 'absolute', bottom: '0px', display: 'flex', paddingLeft: '2px', visibility: running > 0 ? 'visible' : 'hidden'}}>\n                        <CircularProgress sx={{color: '#BC4A09'}} size={15} value={70}/>\n                        <Typography fontSize={12} sx={{paddingLeft: '3px', marginBottom: '4px'}}> Running </Typography> \n                    </div>\n                </Paper>\n            </Drawer>\n            <Box\n                component=\"main\"\n                sx={{\n                    backgroundColor: (theme) =>\n                    theme.palette.mode === 'light'\n                        ? theme.palette.grey[100]\n                        : theme.palette.grey[900],\n                    flexGrow: 1,\n                    height: '100vh',\n                    overflow: 'hidden',\n                }}\n            >\n                <Toolbar />\n                <Paper\n                    sx={{\n                        p: 2,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        height: '92vh',\n                        width: '100%',\n                        overflow: title==='Organizations' ? 'auto' : 'hidden',\n                        backgroundColor: '#eee',\n                    }}\n                >\n                    <TabPanel value={title} index={'Editor'}>\n                        <Dropzone />\n                    </TabPanel>\n                    <TabPanel value={title} index={'Reaction Network'}>\n                        <ReactionNetwork ref={networkRef}/>\n                    </TabPanel>\n                    <TabPanel value={title} index={'Lattice'}>\n                        <LatticeGraph ref={latticeRef}/>\n                    </TabPanel>\n                    <TabPanel value={title} index={'Organizations'} >\n                        <OrganizationList />\n                    </TabPanel>\n                </Paper>\n            </Box>\n        </Box>\n        </ThemeProvider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport Main from './Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}